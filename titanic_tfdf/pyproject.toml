[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "titanic-enterprise"
version = "1.0.0"
description = "Enterprise-grade ML infrastructure for Titanic survival prediction using TensorFlow Decision Forests"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "ML Engineering Team", email = "ml-team@company.com"},
]
keywords = ["machine-learning", "tensorflow", "decision-forests", "mlops", "titanic"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core ML dependencies
    "tensorflow>=2.15.0",
    "tensorflow-decision-forests>=1.8.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
    
    # Data validation and quality
    "pandera>=0.17.0",
    
    # Configuration management
    "hydra-core>=1.3.0",
    "omegaconf>=2.3.0",
    
    # Experiment tracking
    "mlflow>=2.8.0",
    
    # Data versioning
    "dvc>=3.0.0",
    "dvc-s3>=3.0.0",
    
    # Feature store (stubs)
    "feast>=0.34.0",
    
    # CLI and utilities
    "click>=8.1.0",
    "rich>=13.0.0",
    "tqdm>=4.65.0",
    
    # Logging and monitoring
    "structlog>=23.0.0",
    
    # Visualization
    "matplotlib>=3.6.0",
    "seaborn>=0.12.0",
    "plotly>=5.15.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "hypothesis>=6.82.0",
    
    # Code quality
    "ruff>=0.1.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    
    # Pre-commit
    "pre-commit>=3.4.0",
    
    # Notebook tools
    "nbstripout>=0.6.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.25.0",
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
    "mkdocstrings[python]>=0.23.0",
]

security = [
    # Security scanning
    "safety>=2.3.0",
    "bandit>=1.7.0",
]

[project.scripts]
titanic-train = "titanic_enterprise.cli:train"
titanic-predict = "titanic_enterprise.cli:predict"
titanic-pipeline = "titanic_enterprise.cli:pipeline"

[project.urls]
Homepage = "https://github.com/company/titanic-enterprise"
Documentation = "https://titanic-enterprise.readthedocs.io"
Repository = "https://github.com/company/titanic-enterprise.git"
Issues = "https://github.com/company/titanic-enterprise/issues"

# Tool configurations
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=titanic_enterprise",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
pythonpath = ["src"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-args
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q", # flake8-quotes
    "FLY", # flynt
    "PERF", # perflint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]
unfixable = [
    "F841", # Remove unused variables
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["ARG", "FBT"]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-first-party = ["titanic_enterprise"]

[tool.black]
target-version = ['py310']
line-length = 88
skip-string-normalization = true
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["titanic_enterprise"]
skip_glob = ["*/.venv/*", "*/venv/*"]

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "tensorflow.*",
    "tensorflow_decision_forests.*",
    "mlflow.*",
    "dvc.*",
    "feast.*",
    "pandera.*",
    "plotly.*",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
tests = ["B201", "B301"]
skips = ["B101", "B601"]