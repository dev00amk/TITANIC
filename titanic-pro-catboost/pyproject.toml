[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "titanic-pro-catboost"
version = "0.1.0"
description = "Production-quality CatBoost pipeline for Titanic competition"
authors = [{name = "ML Team", email = "ml@company.com"}]
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.10"
dependencies = [
    "catboost==1.2.5",
    "pandas==2.2.2",
    "numpy==1.26.4",
    "scikit-learn==1.5.1",
    "hydra-core==1.3.2",
    "mlflow==2.14.3",
    "dvc==3.51.2",
    "pandera==0.20.3",
    "great_expectations==0.18.14",
    "pyyaml==6.0.1",
    "shap==0.45.1",
]

[project.optional-dependencies]
dev = [
    "ruff==0.5.7",
    "black==24.4.2",
    "isort==5.13.2",
    "mypy==1.10.0",
    "pytest==8.2.0",
    "pytest-cov==5.0.0",
    "hypothesis==6.108.1",
    "pre-commit==3.7.1",
    "nbstripout==0.7.1",
    "jupyter",
]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

[tool.ruff]
line-length = 88
target-version = "py310"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --maxfail=1"
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]